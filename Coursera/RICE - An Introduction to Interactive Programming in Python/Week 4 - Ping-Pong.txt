# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400
HALF_WIDTH = WIDTH / 2
HALF_HEIGHT = HEIGHT / 2
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [0, 0]
paddle1_vel, paddle2_vel = 0, 0
paddle1_pos = HALF_HEIGHT - HALF_PAD_HEIGHT  
paddle2_pos = HALF_HEIGHT - HALF_PAD_HEIGHT 
score1, score2 = 0, 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_vel = [0, 0]
    if direction == "LEFT":
        ball_vel[0] -= random.randint(2, 4) 
        ball_vel[1] -= random.randint(1, 3) 
    elif direction == "RIGHT":
        ball_vel[0] += random.randint(2, 4) 
        ball_vel[1] -= random.randint(1, 3)

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, ball_pos  # these are numbers
    global score1, score2  # these are ints
    direction = random.choice(["LEFT", "RIGHT"])
    score1, score2 = 0, 0
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    spawn_ball(direction)
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, BALL_RADIUS
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")

    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, 'Green', 'White')
   
    # draw paddles
    canvas.draw_polygon([(0, paddle1_pos  ), (PAD_WIDTH, paddle1_pos ), \
                         (PAD_WIDTH, paddle1_pos + PAD_HEIGHT),(0, paddle1_pos + PAD_HEIGHT)], 1, 'Green', 'Orange')
    canvas.draw_polygon([(WIDTH - PAD_WIDTH, paddle2_pos ), (WIDTH, paddle2_pos), \
                         (WIDTH, paddle2_pos + PAD_HEIGHT ),(WIDTH - PAD_WIDTH, paddle2_pos + PAD_HEIGHT )], 1, 'Green', 'Orange')
    
    #Checking paddle collision
    if paddle1_pos <= 0:
        paddle1_pos = 0
    if paddle1_pos >= HEIGHT - PAD_HEIGHT:
        paddle1_pos = HEIGHT - PAD_HEIGHT      
    if paddle2_pos <= 0:
        paddle2_pos = 0
    if paddle2_pos >= HEIGHT - PAD_HEIGHT:
        paddle2_pos = HEIGHT - PAD_HEIGHT          

    #Method for ckecking LOOOSE    
    if ( ball_pos[0] - BALL_RADIUS ) <= 0 :
        ball_pos = [WIDTH / 2, HEIGHT / 2]
        score2 += 1
        #print "paddle1_pos1", paddle1_pos, "paddle2_pos1", paddle1_pos + 80, "boll position - radius [", ball_pos[0] - BALL_RADIUS, ",",ball_pos[1],"]"
        #print "paddle1 range ", range( int(paddle1_pos - BALL_RADIUS * 0.25), int(paddle1_pos + 81 + BALL_RADIUS * 0.25))
        spawn_ball("RIGHT")
    if ( ball_pos[0] + BALL_RADIUS ) >= WIDTH :
        #print "paddle2_pos1", paddle2_pos, "paddle2_pos2", paddle2_pos + 80," boll position + radius [", ball_pos[0] + BALL_RADIUS, ",",ball_pos[1],"]"
        #print "paddle2 range ", int(paddle2_pos + 81 + BALL_RADIUS * 0.25)
        ball_pos = [WIDTH / 2, HEIGHT / 2]
        score1 += 1
        spawn_ball("LEFT")
    
    #Reflecting from top
    if ( ball_pos[1] + BALL_RADIUS ) >= HEIGHT or ( ball_pos[1] - BALL_RADIUS ) <= 0 :
         ball_vel[1] = -ball_vel[1]

    #Collision for paddle1
    if ( ball_pos[0] - BALL_RADIUS ) <= PAD_WIDTH and \
         ball_pos[1] >= (paddle1_pos - BALL_RADIUS * 0.25) and \
         ball_pos[1] <= (paddle1_pos + 81 + BALL_RADIUS * 0.25):
        #print "paddle1_pos", paddle1_pos, "boll position + radius [", ball_pos[0] - BALL_RADIUS, ",",ball_pos[1],"]"
        #print "paddle1 range ", range(int(paddle2_pos - BALL_RADIUS * 0.25), int(paddle2_pos + 81 + BALL_RADIUS * 0.25))
        ball_vel[0] += ball_vel[0] * 0.1
        ball_vel[1] += ball_vel[1] * 0.1
        ball_vel[0] = -ball_vel[0]
            
    #Collision for paddle2    
    if ( ball_pos[0] + BALL_RADIUS ) >= (WIDTH - PAD_WIDTH) and \
         ball_pos[1] >= (paddle2_pos - BALL_RADIUS * 0.25) and \
         ball_pos[1] <= (paddle2_pos + 81 + BALL_RADIUS * 0.25):
        #print "paddle2_pos", paddle2_pos, "boll position + radius [", ball_pos[0] + BALL_RADIUS, ",",ball_pos[1],"]"
        #print "paddle2 range ", int(paddle2_pos + 81 + BALL_RADIUS * 0.25)
        ball_vel[0] += ball_vel[0] * 0.1
        ball_vel[1] += ball_vel[1] * 0.1
        ball_vel[0] = -ball_vel[0]
    
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos += paddle1_vel
    paddle2_pos += paddle2_vel
    
    # draw scores
    canvas.draw_text(str(score1), (150, 100), 60, 'Green')
    canvas.draw_text(str(score2), (450, 100), 60, 'Green')    
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    acc = 8
    if key == simplegui.KEY_MAP["left"]:
        spawn_ball("LEFT")
    elif key == simplegui.KEY_MAP["right"]: 
        spawn_ball("RIGHT")
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel += acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel -= acc
    elif key==simplegui.KEY_MAP["w"]:
        paddle1_vel -= acc
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel += acc
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    acc = 8
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel -= acc
    elif key==simplegui.KEY_MAP["up"]:
        paddle2_vel += acc
    elif key==simplegui.KEY_MAP["w"]:
        paddle1_vel += acc
    elif key==simplegui.KEY_MAP["s"]:
        paddle1_vel -= acc

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('RESTART', new_game)

# start frame
new_game()
frame.start()
