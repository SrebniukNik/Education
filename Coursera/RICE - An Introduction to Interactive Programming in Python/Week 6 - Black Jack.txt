# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score_wins = 0
score_luz = 0


# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# Card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)

    def draw_back(self, canvas, pos):
        card_loc = (CARD_BACK_CENTER[0], CARD_BACK_CENTER[1] )
        canvas.draw_image(card_back, card_loc, CARD_BACK_SIZE, [pos[0] + CARD_BACK_CENTER[0], pos[1] + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
        
        
# Hand class
class Hand:
    def __init__(self):
        self.hand_value = 0
        self.hand_cards = []
        
    def __str__(self):
        #Return a string representation of a hand
        hand_str = ""
        for hand_card in range(len(self.hand_cards)):
            hand_str += str(self.hand_cards[hand_card]) + " "
        #Return a string representation of a hand
        return "Hands contains " + hand_str
    
    def add_card(self):
        return deck_cards.pop()
         
    def get_value(self, hand_cards):
        self.hand_value = 0
        self.hand_cards = hand_cards
        card = ""
        for card in self.hand_cards:
            card = str(card)
            self.hand_value += VALUES[card[1]]
        for card in self.hand_cards:    
            if card[1] == 'A' and self.hand_value + 10 <= 21:
                self.hand_value += 10
        return self.hand_value
    
#Deck class 
class Deck:
    def __init__(self):
        self.deck_cards = [ suit + str(rank) for suit in SUITS
                          for rank in RANKS ]

    def shuffle(self):
        # Shuffle the deck 
        random.shuffle(self.deck_cards)
        return self.deck_cards
    
    def deal_card(self):
        return deck_cards.pop()       

  
  
    def __str__(self):
        # Return a string representing the deck
        deck_str = ""
        for deck_card in range(len(self.deck_cards)):
            deck_str += str(self.deck_cards[deck_card]) + " "
        # Return a string representation of a hand
        return "Hands contains " + deck_str

# Define event handlers for buttons
def deal():
    """
    Doing new game by press DEAL button
    Also we are doing some print out to console for 
    troubleshoot
    """
    global outcome, in_play, deck_cards, dealer_hand, player, player_outcome, \
           dealer, player_hand, dealer_value, player_value, score_luz
    dealer_value, player_value = 0, 0
    player_hand, dealer_hand = [], []
    player, dealer = Hand(), Deck()
    deck_cards = dealer.shuffle()
    #Card for dealer, and player please
    print "DECK_CARDS", deck_cards
    for init_cards in range(2):
        player_hand.append(player.add_card())
        dealer_hand.append(dealer.deal_card())
    print "player_hand", player_hand
    print "dealer_hand", dealer_hand
    player_outcome = "Hit or stand?"    
    if in_play:
        score_luz += 1
    in_play = True

    
def hit():
    """
    Func for asking new card from dealer
    Also we are doing some print out to console for 
    troubleshoot
    """
    global dealer_hand, player_hand, player, dealer, in_play, \
           dealer_value, player_value, score_luz, outcome
    if in_play:
        player_value = player.get_value(player_hand)
        player_hand.append(player.add_card())
        player_value = player.get_value(player_hand)
        print "player_value", player_value
        print "player_hand", player_hand

        if player_value <= 21:
            print "player_value", player_value
            print "player_hand", player_hand      

        else:
            print "You have busted"
            score_luz += 1
            outcome = "You have busted"
            in_play = False

       
def stand():
    """
    Func for games stop and doing hand's value checking
    Also THERE are A LOT of some prints to console for 
    troubleshooting. 
    """    
    global dealer_hand, player_hand, player, dealer, in_play, \
           dealer_value, player_value, score_wins, score_luz, outcome
    dealer_value17 = player.get_value(dealer_hand[1:])
    dealer_value = player.get_value(dealer_hand)
    player_value = player.get_value(player_hand)

    if in_play == True:
        if player_value > 21:
            print "You have busted"
            outcome = "You have busted"
            
        elif dealer_value17 <= 17:
            dealer_hand.append(dealer.deal_card())
            dealer_value17 = player.get_value(dealer_hand[1:])
            dealer_value = player.get_value(dealer_hand)
            print "dealer_hand ln182", dealer_hand
            print "dealer_value17 ln183", dealer_value17
            print "dealer_value ln184", dealer_value
            print "player_value ln186", player_value
 
        elif (dealer_value >= player_value and dealer_value <= 21):
            print "Dealer wins"
            print "dealer_value d>=p", dealer_value
            print "player_value d>=p", player_value    
            outcome = "Dealer wins"
            score_luz += 1
            in_play = False
            
        else:
            print "Player wins"
            outcome = "Player wins"
            score_wins += 1
            in_play = False
            print "dealer_value d<p", dealer_value
            print "player_value d<p", player_value        
            
       

# draw handler    
def draw(canvas):
    """
    Doing some GUI magic
    """
    global outcome, in_play, score_wins, score_luz, player_outcome
    step_dealer, step_player = 0, 0
    
    for dealer_card in dealer_hand:
        card = Card(dealer_card[0], dealer_card[1])
        card.draw(canvas, [50 + step_dealer, 150])
        step_dealer += 112
    if in_play:
        card_back = Card(dealer_hand[0][0], dealer_hand[0][1])
        card_back.draw_back(canvas, [50 , 150])
    else:
        player_outcome = "New deal?"
    for player_card in player_hand:
        card = Card(player_card[0], player_card[1])
        card.draw(canvas, [50 + step_player, 350])
        step_player += 112
        
    canvas.draw_text("BLacKJacK", [70, 70], 28, 'BLACK')
    canvas.draw_text("DEALER", [50, 130], 28, 'BLUE')
    canvas.draw_text("PLAYER", [50, 330], 28, 'BLUE')
    canvas.draw_text(outcome, [270, 130], 28, 'BLUE')
    canvas.draw_text( " PLAYER SCORES. WIN(s): " + str(score_wins) + " ||| LUZ(s): " + str(score_luz), [260, 20], 18, 'BLUE')    
    canvas.draw_text(player_outcome, [270, 330], 28, 'BLUE')
        
# Frame initialization
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#Buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# Rock'n'roll
deal()
frame.start()