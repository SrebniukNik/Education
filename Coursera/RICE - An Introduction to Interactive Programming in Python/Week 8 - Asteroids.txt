# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
time_explos = 0
started = False


class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated
    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_blue = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")
asteroid_brown = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_brown.png")
asteroid_blend = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blend.png")
asteroids = [asteroid_blue, asteroid_brown, asteroid_blend]

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self, canvas):
        if self.thrust:
            canvas.draw_image(self.image, (self.image_center[0] + self.image_size[0], self.image_center[1]), self.image_size, self.pos , self.image_size, self.angle) 
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos , self.image_size, self.angle)

    def shoot(self):
        global a_missile, started
        if started:
            forward = angle_to_vector(self.angle)
            missile_pos = [ self.pos[0] + 45*forward[0], self.pos[1] + 45*forward[1]]
            missile_vel = [ self.vel[0] + forward[0]*7,  self.vel[1] + forward[1]*7]
            a_missile = Sprite(missile_pos, missile_vel, 0, 0, missile_image, missile_info, missile_sound)        
            missile_group.add(a_missile)
            missile_sound.play()
        
    def update(self):
        """
        Func for updating velocity, angle, angle_velocity,
        acceleration
        """        
        self.angle += self.angle_vel
        forward = angle_to_vector(self.angle)
        for coord in range(len(self.pos)):
            self.pos[coord] += self.vel[coord]
            
        if self.thrust:      
            for speed in range(len(self.vel)):
                self.vel[speed] += forward[speed] * .11           
        for speed in range(len(self.vel)):
            self.vel[speed] *= .98
            
        if self.pos[0] > WIDTH: 
            self.pos[0] = 0
        elif self.pos[0] < 0: 
            self.pos[0] = WIDTH
            
        if self.pos[1] > HEIGHT: 
            self.pos[1] = 0
        elif self.pos[1] < 0: 
            self.pos[1] = HEIGHT          
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        center = list(self.image_center)
        if self.animated:
                center[0] = self.image_center[0] + (self.image_size[0] * self.age)
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos , self.image_size, self.angle) 
        
    def update(self):
        self.angle += self.angle_vel

        for dummy_i in range(len(self.pos)):
            self.pos[dummy_i] += self.vel[dummy_i]    
        
        if self.pos[0] > WIDTH : self.pos[0] = 0
        elif self.pos[0] < 0   : self.pos[0] = WIDTH
        
        if self.pos[1] > HEIGHT: self.pos[1] = 0
        elif self.pos[1] < 0   : self.pos[1] = HEIGHT  
            
        self.age += 1        
        return self.age > self.lifespan

        
    def collide(self, other_object):
        return dist(other_object.pos, self.pos) < (self.radius + other_object.radius)
  
# timer handler that spawns a rock    
def rock_spawner():
    global asteroids
    rock_vel = [0]*2
    rock_pos = [0]*2
    for dummy_i in range(2):
        rock_vel[dummy_i] = random.randrange(-1, 1)
    rock_angle_vel = random.choice([-1.0,1.0]) / random.randrange(18, 25)
    asteroid_image = random.choice(asteroids)
    
    rock_pos[0] = random.randrange(WIDTH)
    rock_pos[1] = random.randrange(HEIGHT)
    
    while dist(rock_pos, my_ship.pos) < 150:
        rock_pos[0] = random.randrange(WIDTH)
        rock_pos[1] = random.randrange(HEIGHT)
    
    new_rock = Sprite(rock_pos, rock_vel, 0, rock_angle_vel, asteroid_image, asteroid_info)
    if len(rock_group) <= 12:
        rock_group.add(new_rock)
 
def process_sprite_group(canvas, group):
    for item in set(group):
        item.draw(canvas)
        item.update()
        if item.update():        
            group.remove(item)

#Compute collide ship and asteroids
def group_collide(ship, sprites):
    global rock_group, explosion_group
    temp_lst = []
    temp_lst.extend(sprites)
    for sprite in temp_lst:
        if sprite.collide(ship):
            explosion_group.add(Sprite(sprite.pos, [0, 0], 0, 0, explosion_image,
                                explosion_info, explosion_sound))
            rock_group.discard(sprite)
            #print explosion_group
            return True


#Compute collide missile and asteroids     
def group_group_collide(rocks, missiles):
    global rock_group, score
    missiles_tmp = []
    missiles_tmp.extend(missiles)
    rocks_tmp = []
    rocks_tmp.extend(rocks)
    for rock in rocks_tmp:
        if group_collide(rock, missiles):
            rock_group.discard(rock)
            score += 1

def draw(canvas):
    # animiate background
    global time, lives, started, rock_group, missile_group, scores, time_explos
    time += 1
    time_exlos = 0
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_text("SCORE " + str(score), (WIDTH - 110,30) , 25, "WHITE")
    canvas.draw_text("LIVES " + str(lives), (10,30) , 25, "WHITE")
    if started:
        process_sprite_group(canvas, rock_group)
        process_sprite_group(canvas, missile_group)
        process_sprite_group(canvas, explosion_group) 
        group_group_collide(rock_group, missile_group)
        if group_collide(my_ship, rock_group):
            lives -=1
        # increase rock's velocity using score
        my_ship.draw(canvas)
        my_ship.update()
        #soundtrack.play()
        soundtrack.set_volume(0.7)
    if lives == 0 or started == False:
        started = False
        splash.draw(canvas)
        rock_group = set([])
        missile_group = set([])
        my_ship.pos = [WIDTH / 2, HEIGHT / 2]
        my_ship.vel= [0, 0]
        my_ship.angle, my_ship.angle_vel = -1.57079633, 0
        soundtrack.rewind()
        ship_thrust_sound.rewind()


def mouse_handler(position):
    global started, score, lives
    if (WIDTH / 2 - splash_info.size[0] /2) < position[0] < (WIDTH / 2 + splash_info.size[0] /2 ) and \
       (HEIGHT / 2 - splash_info.size[1] /2) < position[1] < (HEIGHT / 2 + splash_info.size[1] /2 ):
        score, lives = 0, 3
        started = True

        
def keydown(key):
    """
    Key handler for button's pressing
    """
    rad = .06
    vel = 1
    if key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = True
        my_ship.vel = [ speed + vel for speed in my_ship.vel]
        ship_thrust_sound.rewind()
        ship_thrust_sound.play()
    elif key == simplegui.KEY_MAP["down"]:
        my_ship.thrust = True
        my_ship.vel = [ 0 for speed in my_ship.vel ]
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel += rad
    elif key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel -= rad
    elif key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()

def keyup(key):
    """
    Key handler for button's release
    """
    rad = .07
    vel = 0.5
    if key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = False
        ship_thrust_sound.rewind()       
    elif key == simplegui.KEY_MAP["down"]:
        my_ship.thrust = False
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
    elif key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0     
        
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], -1.57079633 , ship_image, ship_info)
splash = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, splash_image, splash_info)
rock_group = set([])
missile_group = set([])
rock_group = set([])
explosion_group = set([])

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(mouse_handler) 
button1 = frame.add_button('Restart', frame.start)
button2 = frame.add_button('Stop', frame.stop)
#register timer
timer = simplegui.create_timer(1000.0, rock_spawner)


# get things rolling
timer.start()
frame.start()